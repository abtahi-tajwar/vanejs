let prefix = "vn"; function makeAttr(t) { return prefix ? `data-${prefix}-${t}` : `data-${t}` } const EngineAttributes = { IF: makeAttr("if"), ELSEIF: makeAttr("elseif"), ELSE: makeAttr("else"), CONDITION: makeAttr("condition"), BIND: makeAttr("bind"), REPEAT: makeAttr("repeat"), REPEAT_ITEM: makeAttr("ritem"), NESTED_LEVEL: makeAttr("nested-level"), ID: makeAttr("id"), TARGET: makeAttr("target"), CONDITION_REMNANT: makeAttr("cond-remnant") }, appStates = new Proxy({}, { get: (t, e) => t[e], set: (t, e, r) => (t[e] = r, !0) }); let templateCache = null; function $setState(t, e) { appStates[t] = e, updateDOMValues(t) } function $getState(t) { return appStates[t] } function $deleteState(t) { delete appStates[t], updateDOMValues(null) } const refactorDOM = () => { let t = document.body.cloneNode(!0), e = Object.values(EngineAttributes).map(t => `[${t}]`).join(", "), r = document.querySelectorAll(e), n = t.querySelectorAll(e), i = Object.values(EngineAttributes); r.forEach((t, e) => { let r = Array.from(t.attributes); r.forEach((r, a) => { if (i.includes(r.name) && (crypto.getRandomValues(new Uint8Array(8)).map(t => t.toString(36).padStart(2, "0")).join("").slice(0, 8), t.setAttribute(r.name, r.value), t.setAttribute(makeAttr("target"), e), n[e].setAttribute(makeAttr("id"), e), r.name === EngineAttributes.REPEAT)) { let u = setNestedLevel(n[e], r.name, EngineAttributes.NESTED_LEVEL); t.setAttribute(EngineAttributes.NESTED_LEVEL, u) } }) }), unwrapTemplates(), templateCache = t }; function unwrapTemplates(t = document.body) { let e = document.createTreeWalker(t, NodeFilter.SHOW_ELEMENT, { acceptNode: t => "TEMPLATE" === t.tagName ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP }), r = [], n; for (; n = e.nextNode();)r.push(n); r.forEach(t => { let e = t.parentNode; if (!e) return; unwrapTemplates(t.content); let r = document.createDocumentFragment(); r.appendChild(t.content.cloneNode(!0)), e.replaceChild(r, t) }) } const updateDOMValues = t => { let e = templateCache.querySelectorAll(`[${EngineAttributes.IF}], [${EngineAttributes.CONDITION}]`); renderConditions(e); let r = document.querySelectorAll(`[${EngineAttributes.BIND}^="${t}."]`); renderBinds(r); let n = document.querySelectorAll(`[${EngineAttributes.REPEAT}^="${t}."]`); renderRepeats(n) }; function reRenderDOM(t, e = null) { let r = [], n = [], i = [], a = document.createTreeWalker(t, NodeFilter.SHOW_ELEMENT, { acceptNode: t => e && t.hasAttribute(e) ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT }, !1), u; for (; u = a.nextNode();)u.hasAttribute(EngineAttributes.BIND) ? r.push(u) : u.hasAttribute(EngineAttributes.CONDITION) ? n.push(u) : u.hasAttribute(EngineAttributes.REPEAT) && i.push(u); n.length && renderConditions(n), r.length && renderBinds(r), i.length && renderRepeats(i) } function renderConditions(t) { t.forEach(t => { if (t.hasAttribute(EngineAttributes.IF) && !t.parentNode.hasAttribute(EngineAttributes.CONDITION)) { let e = document.querySelector(`[${EngineAttributes.TARGET}="${t.getAttribute(EngineAttributes.ID)}"]`); if (!e) return; let r = e.hasAttribute(EngineAttributes.CONDITION_REMNANT), n = t.getAttribute(EngineAttributes.IF), i = evaluateCondition(n, appStates); i && r ? reAddConditionItem(e) : i || r || removeConditionItem(e) } else if (t.hasAttribute(EngineAttributes.CONDITION)) { let a = !1; Array.from(t.children).forEach(t => { if (t.hasAttribute(EngineAttributes.IF) || t.hasAttribute(EngineAttributes.ELSEIF) || t.hasAttribute(EngineAttributes.ELSE)) { let e = document.querySelector(`[${EngineAttributes.TARGET}="${t.getAttribute(EngineAttributes.ID)}"]`); if (!e) return; let r = e.hasAttribute(EngineAttributes.CONDITION_REMNANT); if (t.hasAttribute(EngineAttributes.IF)) { let n = t.getAttribute(EngineAttributes.IF), i = evaluateCondition(n, appStates); a = i, i && r ? reAddConditionItem(e) : i || r || removeConditionItem(e) } else if (t.hasAttribute(EngineAttributes.ELSEIF)) { let u = t.getAttribute(EngineAttributes.ELSEIF), l = evaluateCondition(u, appStates); a ? r || removeConditionItem(e) : l && r ? (reAddConditionItem(e), a = !0) : l || r || removeConditionItem(e) } else !a && r ? reAddConditionItem(e) : a && !r && removeConditionItem(e) } }) } }) } function removeConditionItem(t) { let e = document.createElement("div"); e.setAttribute(EngineAttributes.CONDITION_REMNANT, null), e.setAttribute(EngineAttributes.TARGET, t.getAttribute(EngineAttributes.TARGET)), t.parentNode.replaceChild(e, t) } function reAddConditionItem(t) { let e = t.getAttribute(EngineAttributes.TARGET), r = getTargetDOM(templateCache, e), n = r.cloneNode(!0); n.setAttribute(EngineAttributes.TARGET, e); let i = n.querySelectorAll(`[${EngineAttributes.ID}]`); i.forEach(t => { let e = t.getAttribute(EngineAttributes.ID); t.setAttribute(EngineAttributes.TARGET, e), t.removeAttribute(EngineAttributes.ID) }), n.removeAttribute(EngineAttributes.ID), reRenderDOM(n), t.parentNode.replaceChild(n, t) } const renderBinds = t => { t.forEach(t => { let e; e = t.getAttribute(EngineAttributes.BIND); let r = appStates ? getValueByPath(appStates, e) : null; t.innerText = r }) }; function renderRepeats(t, e = null, r = null, n = 0) { t.forEach(t => { let i = t.getAttribute(`${EngineAttributes.NESTED_LEVEL}`); if (parseInt(i) != n) return; let a = t.getAttribute(`${EngineAttributes.REPEAT}`), [u, l, A] = a.split(" "); if (!u || !A) throw Error(`data-repeat format error at ${state}, please write format like data-repeat="state.example in item"`); e && r && u.includes(`{${e}}`) && (u = u.replace(`{${e}}`, `${r}`)); let E = getValueByPath(appStates, u); if (!Array.isArray(E)) throw Error("data-repeat state is not a valid array, data-repeat only accepts array"); let s = t.getAttribute(`${EngineAttributes.TARGET}`), o = getTargetDOM(templateCache, s); 0 === n && (console.log("Cache DOM", o, t), t.innerHTML = o.innerHTML, t.querySelectorAll(`[${EngineAttributes.ID}]`).forEach(t => { let e = t.getAttribute(EngineAttributes.ID); t.setAttribute(EngineAttributes.TARGET, e), t.removeAttribute(EngineAttributes.ID) })); let b = ""; E.forEach((e, r) => { let i = t.querySelectorAll(`[${EngineAttributes.REPEAT}]`); i.length && renderRepeats(i, A, `${u}[${r}]`, n + 1), o.cloneNode(!0), reRenderDOM(t, EngineAttributes.REPEAT); let a = t.querySelectorAll(`[${EngineAttributes.REPEAT_ITEM}]`), l = []; a.forEach(t => { if (!t.getAttribute(EngineAttributes.REPEAT_ITEM).includes(`{${A}}`)) return; let e = t.getAttribute(EngineAttributes.TARGET); if (l.includes(e)) { t.parentNode.removeChild(t); return } l.push(e); let n = t.getAttribute(EngineAttributes.REPEAT_ITEM), i = n.replace(`{${A}}`, `${u}[${r}]`), a = appStates ? getValueByPath(appStates, i) : null; t.innerText = a }), b += t.innerHTML }), t.innerHTML = b }) } function getValueByPath(t, e) { let r = e.replace(/\[(\w+)\]/g, ".$1"), n = r.split("."), i = t; for (let a of n) { if (null == i) return; i = i[a] } return i } function getTargetDOM(t, e) { return t.querySelector(`[${EngineAttributes.ID}="${e}"]`) } function setNestedLevel(t, e = "data-repeat", r = "data-repeat-level") { let n = t.parentElement, i = 0; for (; n;)n.hasAttribute(e) && i++, n = n.parentElement; return t.setAttribute(r, i.toString()), i } function evaluateCondition(t, e) { if (e) try { let r = t.replace(/\{(.*?)\}/g, (t, r) => { let n = getValueByPath(e, r.trim()); return "string" == typeof n ? `'${n}'` : "object" == typeof n ? JSON.stringify(n) : n }); return console.log("Populated expression", r), Function(`return (${r});`)() } catch (n) { return console.warn("Failed to evaluate condition:", t, n), !1 } } window.addEventListener("load", function() { refactorDOM() });
